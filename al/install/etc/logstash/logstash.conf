input {
    beats {
        type => beats
        port => 5000
    }
}
filter {
    if [type] == "syslog" {
        grok {
            match => [
                "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{WORD:al_action}:\s+%{DATA:al_sid}/%{DATA:al_srl} C:%{NUMBER:al_cached} S:%{NUMBER:al_score:int} T:%{NUMBER:al_executiontime:float} Z:%{NUMBER:al_filesize:int}",
                "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{WORD:al_action}: %{DATA:al_sid}/%{DATA:al_srl} \(%{DATA:al_filetype}\)\[p%{NUMBER:al_priority:int}\]",
                "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{GREEDYDATA:message}"
            ]
            overwrite => [ "message" ]
        }
        syslog_pri {}
        date {
            match => [ "syslog_timestamp", "MMM  d  HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
    }
    if [type] == "audit" {
        grok {
            match => [
		"message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{USER:al_user}\s+\[%{DATA:al_user_maxclass}\]\s+::\s+%{WORD:al_function}\(%{DATA:al_params}\)",
                "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{USER:al_user}\s+\[%{DATA:al_user_maxclass}\]\s+::\s+%{DATA:al_error} - %{DATA:al_source}\[%{WORD:al_buildno}\] \(%{DATA:al_webpage}\)",
                "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{USER:al_impersonator}\(on behalf of\s+%{USER:al_user}\)\s+\[%{DATA:al_user_maxclass}\]\s+::\s+%{WORD:al_function}\(%{DATA:al_params}\)",
                "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{USER:al_impersonator}\(on behalf of\s+%{USER:al_user}\)\s+\[%{DATA:al_user_maxclass}\]\s+::\s+%{DATA:al_error} - %{DATA:al_source}\[%{WORD:al_buildno}\] \(%{DATA:al_webpage}\)",
                "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:al_host} %{WORD:al_prog}\s+%{WORD:al_severity}\s+%{NUMBER:pid:int}\s+%{DATA:component}\s+\|\s+%{GREEDYDATA:message}"
            ]
            overwrite => [ "message" ]
        }
        syslog_pri {}
        date {
            match => [ "syslog_timestamp", "MMM  d  HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
    }
}
output {
    if [type] == "syslog" {
        elasticsearch {
            hosts => ['localhost:9200']
            index => "logs-%{+YYYY.MM.dd}"
        }
    } else if [type] == "audit" {
        elasticsearch {
            hosts => ['localhost:9200']
            index => "audit-%{+YYYY.MM.dd}"
        }
    }

    stdout { codec => rubydebug }
}
